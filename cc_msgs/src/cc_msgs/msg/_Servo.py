"""autogenerated by genpy from cc_msgs/Servo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Servo(genpy.Message):
  _md5sum = "79ca2c0e55f489ead7e899ee71596a66"
  _type = "cc_msgs/Servo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 value

bool enabled
bool inverted

bool custom_pwm_ms
float64 min_pwm_ms
float64 max_pwm_ms

bool custom_value
float64 min_value
float64 max_value


"""
  __slots__ = ['value','enabled','inverted','custom_pwm_ms','min_pwm_ms','max_pwm_ms','custom_value','min_value','max_value']
  _slot_types = ['float64','bool','bool','bool','float64','float64','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       value,enabled,inverted,custom_pwm_ms,min_pwm_ms,max_pwm_ms,custom_value,min_value,max_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Servo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.value is None:
        self.value = 0.
      if self.enabled is None:
        self.enabled = False
      if self.inverted is None:
        self.inverted = False
      if self.custom_pwm_ms is None:
        self.custom_pwm_ms = False
      if self.min_pwm_ms is None:
        self.min_pwm_ms = 0.
      if self.max_pwm_ms is None:
        self.max_pwm_ms = 0.
      if self.custom_value is None:
        self.custom_value = False
      if self.min_value is None:
        self.min_value = 0.
      if self.max_value is None:
        self.max_value = 0.
    else:
      self.value = 0.
      self.enabled = False
      self.inverted = False
      self.custom_pwm_ms = False
      self.min_pwm_ms = 0.
      self.max_pwm_ms = 0.
      self.custom_value = False
      self.min_value = 0.
      self.max_value = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d3B2dB2d.pack(_x.value, _x.enabled, _x.inverted, _x.custom_pwm_ms, _x.min_pwm_ms, _x.max_pwm_ms, _x.custom_value, _x.min_value, _x.max_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.value, _x.enabled, _x.inverted, _x.custom_pwm_ms, _x.min_pwm_ms, _x.max_pwm_ms, _x.custom_value, _x.min_value, _x.max_value,) = _struct_d3B2dB2d.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.inverted = bool(self.inverted)
      self.custom_pwm_ms = bool(self.custom_pwm_ms)
      self.custom_value = bool(self.custom_value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d3B2dB2d.pack(_x.value, _x.enabled, _x.inverted, _x.custom_pwm_ms, _x.min_pwm_ms, _x.max_pwm_ms, _x.custom_value, _x.min_value, _x.max_value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.value, _x.enabled, _x.inverted, _x.custom_pwm_ms, _x.min_pwm_ms, _x.max_pwm_ms, _x.custom_value, _x.min_value, _x.max_value,) = _struct_d3B2dB2d.unpack(str[start:end])
      self.enabled = bool(self.enabled)
      self.inverted = bool(self.inverted)
      self.custom_pwm_ms = bool(self.custom_pwm_ms)
      self.custom_value = bool(self.custom_value)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d3B2dB2d = struct.Struct("<d3B2dB2d")
