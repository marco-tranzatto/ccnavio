/* Auto-generated by genmsg_cpp for file /home/muawijhe/Development/ccmain/src/cc_msgs/msg/IMURaw.msg */
#ifndef CC_MSGS_MESSAGE_IMURAW_H
#define CC_MSGS_MESSAGE_IMURAW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace cc_msgs
{
template <class ContainerAllocator>
struct IMURaw_ {
  typedef IMURaw_<ContainerAllocator> Type;

  IMURaw_()
  : header()
  , linear_acceleration_g()
  , angular_speed_deg_s()
  , magnetic_field_uT()
  , temperature_degC(0.0)
  {
  }

  IMURaw_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , linear_acceleration_g(_alloc)
  , angular_speed_deg_s(_alloc)
  , magnetic_field_uT(_alloc)
  , temperature_degC(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_g_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  linear_acceleration_g;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_speed_deg_s_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  angular_speed_deg_s;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _magnetic_field_uT_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  magnetic_field_uT;

  typedef double _temperature_degC_type;
  double temperature_degC;


  typedef boost::shared_ptr< ::cc_msgs::IMURaw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cc_msgs::IMURaw_<ContainerAllocator>  const> ConstPtr;
}; // struct IMURaw
typedef  ::cc_msgs::IMURaw_<std::allocator<void> > IMURaw;

typedef boost::shared_ptr< ::cc_msgs::IMURaw> IMURawPtr;
typedef boost::shared_ptr< ::cc_msgs::IMURaw const> IMURawConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cc_msgs::IMURaw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cc_msgs::IMURaw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cc_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::IMURaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::IMURaw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cc_msgs::IMURaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "19d8a1835e5dba2215abcf6e2f5ef1f7";
  }

  static const char* value(const  ::cc_msgs::IMURaw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x19d8a1835e5dba22ULL;
  static const uint64_t static_value2 = 0x15abcf6e2f5ef1f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::cc_msgs::IMURaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc_msgs/IMURaw";
  }

  static const char* value(const  ::cc_msgs::IMURaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cc_msgs::IMURaw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Vector3 linear_acceleration_g\n\
geometry_msgs/Vector3 angular_speed_deg_s\n\
geometry_msgs/Vector3 magnetic_field_uT\n\
float64 temperature_degC\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::cc_msgs::IMURaw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::cc_msgs::IMURaw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::cc_msgs::IMURaw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cc_msgs::IMURaw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.linear_acceleration_g);
    stream.next(m.angular_speed_deg_s);
    stream.next(m.magnetic_field_uT);
    stream.next(m.temperature_degC);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IMURaw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cc_msgs::IMURaw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cc_msgs::IMURaw_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "linear_acceleration_g: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration_g);
    s << indent << "angular_speed_deg_s: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_speed_deg_s);
    s << indent << "magnetic_field_uT: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.magnetic_field_uT);
    s << indent << "temperature_degC: ";
    Printer<double>::stream(s, indent + "  ", v.temperature_degC);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CC_MSGS_MESSAGE_IMURAW_H

