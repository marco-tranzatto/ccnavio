/* Auto-generated by genmsg_cpp for file /home/muawijhe/Development/ccmain/src/cc_msgs/msg/Servo.msg */
#ifndef CC_MSGS_MESSAGE_SERVO_H
#define CC_MSGS_MESSAGE_SERVO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cc_msgs
{
template <class ContainerAllocator>
struct Servo_ {
  typedef Servo_<ContainerAllocator> Type;

  Servo_()
  : value(0.0)
  , enabled(false)
  , inverted(false)
  , custom_pwm_ms(false)
  , min_pwm_ms(0.0)
  , max_pwm_ms(0.0)
  , custom_value(false)
  , min_value(0.0)
  , max_value(0.0)
  {
  }

  Servo_(const ContainerAllocator& _alloc)
  : value(0.0)
  , enabled(false)
  , inverted(false)
  , custom_pwm_ms(false)
  , min_pwm_ms(0.0)
  , max_pwm_ms(0.0)
  , custom_value(false)
  , min_value(0.0)
  , max_value(0.0)
  {
  }

  typedef double _value_type;
  double value;

  typedef uint8_t _enabled_type;
  uint8_t enabled;

  typedef uint8_t _inverted_type;
  uint8_t inverted;

  typedef uint8_t _custom_pwm_ms_type;
  uint8_t custom_pwm_ms;

  typedef double _min_pwm_ms_type;
  double min_pwm_ms;

  typedef double _max_pwm_ms_type;
  double max_pwm_ms;

  typedef uint8_t _custom_value_type;
  uint8_t custom_value;

  typedef double _min_value_type;
  double min_value;

  typedef double _max_value_type;
  double max_value;


  typedef boost::shared_ptr< ::cc_msgs::Servo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cc_msgs::Servo_<ContainerAllocator>  const> ConstPtr;
}; // struct Servo
typedef  ::cc_msgs::Servo_<std::allocator<void> > Servo;

typedef boost::shared_ptr< ::cc_msgs::Servo> ServoPtr;
typedef boost::shared_ptr< ::cc_msgs::Servo const> ServoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cc_msgs::Servo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cc_msgs::Servo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cc_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::Servo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::Servo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cc_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "79ca2c0e55f489ead7e899ee71596a66";
  }

  static const char* value(const  ::cc_msgs::Servo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x79ca2c0e55f489eaULL;
  static const uint64_t static_value2 = 0xd7e899ee71596a66ULL;
};

template<class ContainerAllocator>
struct DataType< ::cc_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc_msgs/Servo";
  }

  static const char* value(const  ::cc_msgs::Servo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cc_msgs::Servo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 value\n\
\n\
bool enabled\n\
bool inverted\n\
\n\
bool custom_pwm_ms\n\
float64 min_pwm_ms\n\
float64 max_pwm_ms\n\
\n\
bool custom_value\n\
float64 min_value\n\
float64 max_value\n\
\n\
\n\
";
  }

  static const char* value(const  ::cc_msgs::Servo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cc_msgs::Servo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cc_msgs::Servo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
    stream.next(m.enabled);
    stream.next(m.inverted);
    stream.next(m.custom_pwm_ms);
    stream.next(m.min_pwm_ms);
    stream.next(m.max_pwm_ms);
    stream.next(m.custom_value);
    stream.next(m.min_value);
    stream.next(m.max_value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Servo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cc_msgs::Servo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cc_msgs::Servo_<ContainerAllocator> & v) 
  {
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "inverted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inverted);
    s << indent << "custom_pwm_ms: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.custom_pwm_ms);
    s << indent << "min_pwm_ms: ";
    Printer<double>::stream(s, indent + "  ", v.min_pwm_ms);
    s << indent << "max_pwm_ms: ";
    Printer<double>::stream(s, indent + "  ", v.max_pwm_ms);
    s << indent << "custom_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.custom_value);
    s << indent << "min_value: ";
    Printer<double>::stream(s, indent + "  ", v.min_value);
    s << indent << "max_value: ";
    Printer<double>::stream(s, indent + "  ", v.max_value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CC_MSGS_MESSAGE_SERVO_H

