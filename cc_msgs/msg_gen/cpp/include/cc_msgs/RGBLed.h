/* Auto-generated by genmsg_cpp for file /home/muawijhe/Development/ccmain/src/cc_msgs/msg/RGBLed.msg */
#ifndef CC_MSGS_MESSAGE_RGBLED_H
#define CC_MSGS_MESSAGE_RGBLED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cc_msgs
{
template <class ContainerAllocator>
struct RGBLed_ {
  typedef RGBLed_<ContainerAllocator> Type;

  RGBLed_()
  : red(0.0)
  , green(0.0)
  , blue(0.0)
  {
  }

  RGBLed_(const ContainerAllocator& _alloc)
  : red(0.0)
  , green(0.0)
  , blue(0.0)
  {
  }

  typedef double _red_type;
  double red;

  typedef double _green_type;
  double green;

  typedef double _blue_type;
  double blue;


  typedef boost::shared_ptr< ::cc_msgs::RGBLed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cc_msgs::RGBLed_<ContainerAllocator>  const> ConstPtr;
}; // struct RGBLed
typedef  ::cc_msgs::RGBLed_<std::allocator<void> > RGBLed;

typedef boost::shared_ptr< ::cc_msgs::RGBLed> RGBLedPtr;
typedef boost::shared_ptr< ::cc_msgs::RGBLed const> RGBLedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cc_msgs::RGBLed_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cc_msgs::RGBLed_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cc_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::RGBLed_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cc_msgs::RGBLed_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cc_msgs::RGBLed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0527f4cbd2a07b7bddf52cf785b45c7c";
  }

  static const char* value(const  ::cc_msgs::RGBLed_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0527f4cbd2a07b7bULL;
  static const uint64_t static_value2 = 0xddf52cf785b45c7cULL;
};

template<class ContainerAllocator>
struct DataType< ::cc_msgs::RGBLed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc_msgs/RGBLed";
  }

  static const char* value(const  ::cc_msgs::RGBLed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cc_msgs::RGBLed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 red\n\
float64 green\n\
float64 blue\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::cc_msgs::RGBLed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cc_msgs::RGBLed_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cc_msgs::RGBLed_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.red);
    stream.next(m.green);
    stream.next(m.blue);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RGBLed_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cc_msgs::RGBLed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cc_msgs::RGBLed_<ContainerAllocator> & v) 
  {
    s << indent << "red: ";
    Printer<double>::stream(s, indent + "  ", v.red);
    s << indent << "green: ";
    Printer<double>::stream(s, indent + "  ", v.green);
    s << indent << "blue: ";
    Printer<double>::stream(s, indent + "  ", v.blue);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CC_MSGS_MESSAGE_RGBLED_H

